import * as grpc from '@grpc/grpc-js';
import * as protoLoader from '@grpc/proto-loader';
import path from 'path';
import { FileDescriptorProto } from 'google-protobuf/google/protobuf/descriptor_pb';
const getServiceNameFromServiceDefinition = (serviceDefinition) => {
    // We retrieve the service name from the path of the first method definition we get
    const methodDefinition = Object.values(serviceDefinition).shift();
    // We expect the path to have the following format /${serviceName}/${methodName}
    return methodDefinition.path.split('/')[1];
};
const createListServicesResponse = (services) => ({
    service: services.map((serviceDefinition) => {
        const name = getServiceNameFromServiceDefinition(serviceDefinition);
        return {
            name,
        };
    }),
});
const getIfFileDescriptorContainsFileContainingSymbol = (fileDescriptor, fileContainingSymbol) => {
    // TODO: is this check sufficient? Do we want to do a more thorough
    //check towards the service list or message list?
    const packageName = fileDescriptor.getPackage();
    return fileContainingSymbol.includes(packageName);
};
const getMethodDefinitionFromServicesByFileContainingSymbol = (services, fileContainingSymbol) => {
    return services.reduce((methodDefinition, service) => {
        if (typeof methodDefinition !== 'undefined') {
            return methodDefinition;
        }
        return Object.values(service).find((method) => {
            const isFileContainingSymbolInService = method.requestType.fileDescriptorProtos.findIndex((fileDescriptorProto) => {
                const fdp = FileDescriptorProto.deserializeBinary(fileDescriptorProto);
                return getIfFileDescriptorContainsFileContainingSymbol(fdp, fileContainingSymbol);
            }) !== -1;
            return isFileContainingSymbolInService;
        });
    }, undefined);
};
const createErrorResponseForStatusAndMessage = (status, message) => {
    const errorResponse = {
        errorCode: status,
    };
    if (message) {
        errorResponse;
    }
    return errorResponse;
};
const createServerReflectionInfoHandler = (services) => (call) => {
    call.on('data', (request) => {
        const { fileContainingSymbol, listServices } = request;
        if (listServices) {
            const response = {
                listServicesResponse: createListServicesResponse(services),
            };
            call.write(response);
        }
        if (fileContainingSymbol) {
            const methodDefinition = getMethodDefinitionFromServicesByFileContainingSymbol(services, fileContainingSymbol);
            if (!methodDefinition) {
                const errorResponse = createErrorResponseForStatusAndMessage(grpc.status.NOT_FOUND);
                call.write({
                    errorResponse,
                });
                return;
            }
            const { fileDescriptorProtos } = methodDefinition.requestType;
            call.write({
                fileDescriptorResponse: {
                    fileDescriptorProto: fileDescriptorProtos,
                },
            });
        }
    });
    call.on('end', () => {
        call.end();
    });
};
const createServerReflectionServiceHandlers = (services) => ({
    ServerReflectionInfo: createServerReflectionInfoHandler(services),
});
const wrapServerWithRefelection = (server) => {
    const services = [];
    const addService = (service) => {
        services.push(service);
    };
    // We create a proxy based on the initial grpc.Server.
    // This allows us to intercept the `addService` method to keep track
    // of all services added to the server.
    const serverProxy = new Proxy(server, {
        get: (target, p, receiver) => {
            if (p === 'addService') {
                return (service, implementation) => {
                    // We keep track of all services added to the gRPC service.
                    addService(service);
                    return target.addService(service, implementation);
                };
            }
            return Reflect.get(target, p, receiver);
        },
    });
    const serverReflectionPackageDefinition = protoLoader.loadSync(`${path.resolve(__dirname)}/../proto/grpc/reflection/v1alpha/reflection.proto`);
    const packageObject = grpc.loadPackageDefinition(serverReflectionPackageDefinition);
    const reflectionService = packageObject.grpc.reflection.v1alpha.ServerReflection.service;
    const handlers = createServerReflectionServiceHandlers(services);
    serverProxy.addService(reflectionService, handlers);
    return serverProxy;
};
export default wrapServerWithRefelection;
//# sourceMappingURL=index.js.map